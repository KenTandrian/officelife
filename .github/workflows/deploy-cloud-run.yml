name: Deploy to Cloud Run (Dev)

on:
  push:
    branches: [deploy]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }} # TODO: update Google Cloud project id
  SERVICE: ${{ secrets.SERVICE }} # TODO: update Cloud Run service name
  REGION: ${{ secrets.REGION }} # TODO: update Cloud Run service region
  GAR_LOCATION: ${{ secrets.REGION }} # TODO: update Artifact Registry location
  REPOSITORY: ${{ secrets.GAR_REPOSITORY }} # TODO: update Artifact Registry repository name
  php-version: '8.1'
  node-version: 18

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup PHP ${{ env.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php-version }}
          extensions: mbstring, dom, fileinfo
          coverage: none
      - name: Check PHP Version
        run: php -v
      - name: Check Composer Version
        run: composer -V
      - name: Check PHP Extensions
        run: php -m

      # Composer
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer files
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
            ${{ runner.os }}-composer-${{ env.php-version }}
            ${{ runner.os }}-composer-
      - name: Install composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      # Yarn
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn files
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-yarn-
      - name: Install yarn dependencies
        run: yarn run inst
      - name: Lint files
        run: yarn run lint:all

      - name: Check if there is any file update needed
        id: check
        run: |
          status=$(git status --porcelain)
          if [ -z "$status" ]; then
            echo "Nothing to push, already up to date."
          else
            echo -e "Waiting modifications:\n$status"
            echo "::error::Resources are not up to date. Please rebuild with: 'yarn run lint:all' and 'yarn run prod'."
            exit -1
          fi
      - name: Get version
        id: version
        run: |
          echo "::set-output name=version::$(git describe --abbrev=0 --tags | sed 's/^v//')"
          echo "::set-output name=release::$(git describe --abbrev=0 --tags --exact-match $GITHUB_SHA 2>/dev/null || git log --pretty="%h" -n1 $GITHUB_SHA)"
      - name: Prepare environment
        run: |
          { \
            echo "MIX_PROD_SOURCE_MAPS=true"; \
            echo "MIX_SENTRY_RELEASE=${{ steps.version.outputs.version }}"; \
          } | tee .env
      - name: Build assets
        run: yarn run production

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      - name: Set Up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build Container
        run: >
          docker build .
          -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"
          --build-arg DB_CONNECTION=${{ secrets.DB_CONNECTION }}
          --build-arg DB_HOST=${{ secrets.DB_HOST }}
          --build-arg DB_PORT=${{ secrets.DB_PORT }}
          --build-arg DB_DATABASE=${{ secrets.DB_DATABASE }}
          --build-arg DB_USERNAME=${{ secrets.DB_USERNAME }}
          --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: Push Container
        run: docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        run: >
          gcloud run deploy ${{ env.SERVICE }}
          --image "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" --region ${{ env.REGION }}
          --port 80
          --allow-unauthenticated

      # If required, use the Cloud Run url output in later steps
      - name: Test Output
        run: curl ${{ steps.deploy.outputs.url }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
