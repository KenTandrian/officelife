name: Build and Deploy to Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
    branches-ignore: ['l10n_master*']
  release:
    types: [created]

  workflow_run:
    workflows: ['Compress images']
    types: [completed]

  workflow_dispatch:

env:
  php-version: '8.1' # Upgraded from v8.0
  node-version: 18
  PROJECT_ID: ecosense-bangkit # TODO: update Google Cloud project id
  SERVICE: officelife # TODO: update Cloud Run service name
  REGION: asia-southeast1 # TODO: update Cloud Run service region
  GAR_LOCATION: asia-southeast1 # TODO: update Artifact Registry location
  REPOSITORY: officelife # TODO: update Artifact Registry repository name

jobs:
  #############
  # Build
  #############
  package:
    runs-on: ubuntu-latest
    name: Build assets
    outputs:
      version: ${{ steps.version.outputs.version }}
      release: ${{ steps.version.outputs.release }}
      package: ${{ steps.package.outputs.package }}

    strategy:
      fail-fast: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PHP ${{ env.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php-version }}
          extensions: mbstring, dom, fileinfo
          coverage: none

      - name: Check PHP Version
        run: php -v
      - name: Check Composer Version
        run: composer -V
      - name: Check PHP Extensions
        run: php -m

      # Composer
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer files
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
            ${{ runner.os }}-composer-${{ env.php-version }}
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      # Yarn
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn files
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-yarn-
      - name: Create package
        id: package
        run: scripts/package.sh 'main'

      - name: Store package
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: ${{ steps.package.outputs.package }}

  #############
  # Deploy
  #############
  docker:
    if: ${{ false }} # Disable it for now.
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    needs: package
    strategy:
      matrix:
        variant: [apache]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          repository: officelifehq/docker
          submodules: true

      - name: Download package
        uses: actions/download-artifact@v2
        with:
          name: package
          path: package

      - name: Copy package
        run: cp package/${{ needs.package.outputs.package }} main/${{ matrix.variant }}/officelife-main.tar.bz2

      - name: Add commit number
        run: sed -i 's/\(org\.opencontainers\.image\.revision="\)/\1${{ github.sha }}/' main/${{ matrix.variant }}/Dockerfile

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v2'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: '${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}'
          context: main/${{ matrix.variant }}
          file: main/${{ matrix.variant }}/Dockerfile

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Test Output
        run: curl ${{ steps.deploy.outputs.url }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
